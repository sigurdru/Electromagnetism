
# Information about all exercises in the file dipol_streamplot.do.txt.
# The information can be loaded into a Python list of dicts by
#
# f = open('.dipol_streamplot.exerinfo', 'r')
# exer = eval(f.read())
#
[{'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': None,
  'no': 1,
  'solution': '!bt\n'
              '\\begin{verbatim}\n'
              'import numpy as np\n'
              'import matplotlib.pyplot as plt\n'
              'import scipy.constants as const\n'
              'mu0 = const.mu_0\n'
              'def dipole(m, r, r0):\n'
              '    """\n'
              '    This function take the magnetic dipole m, with position '
              'r0, \n'
              '    and returnsthe magnetic field in postion r.\n'
              '    """\n'
              '    #np.subtract allows r0 to be a list and not an array\n'
              '    R = np.subtract(np.transpose(r), r0).T\n'
              '    #Finding the length of the vector\n'
              '    norm_R = np.linalg.norm(R, axis=0)\n'
              '    #Tensordot allows us to dotproduct along an axis\n'
              '    m_dot_R = np.tensordot(m, R, axes=1)\n'
              '    #calculatig the magnetic field\n'
              '    B = 3*m_dot_R*R/norm_R**5 - np.tensordot(m, 1/norm_R**3, '
              'axes=0)\n'
              '    #multiplying with the physical constant\n'
              '    B *= mu0/(4*np.pi)\n'
              '    return B\n'
              '    \n'
              'xa = np.linspace(-1, 1)\n'
              'ya = np.linspace(-1, 1)\n'
              'Bx, By = dipole(m = [0, 0.1], r = np.meshgrid(xa, ya),\\\n'
              '     r0=[-0.2, 0.1])\n'
              'plt.streamplot(xa, ya, Bx, By)\n'
              'plt.show()\n'
              '\\end{verbatim}\n'
              '\n'
              '!et',
  'solution_file': None,
  'subex': [],
  'text': '*(Made by Sigurd Sørlie Rustad)*\n'
          '\n'
          '\\noindent\n'
          'In this exercise we are going to visualize the field from a '
          'magnetic dipole with a streamplot. The field from a dipole is given '
          'by the equation\n'
          '!bt\n'
          '\\begin{equation}\n'
          '\\mathbf{B}(\\mathbf{r}) = '
          '\\frac{\\mu_0}{4\\pi}\\bigg(\\frac{3\\mathbf{r}(\\mathbf{m}\\cdot\\mathbf{r})}{r⁵}-\\frac{\\mathbf{m}}{r³}\\bigg)\n'
          '\\end{equation}\n'
          '\n'
          '!et\n'
          'Make a function that takes magnetic moment $\\mathbf{m}$, its '
          'location and the position $\\mathbf{r}$ you want to evaluate the '
          'field.\n'
          'The output should be the resulting magnetic field. You only need to '
          'do it in 2D. Make a streamplot to visualize the field.\n'
          '\n'
          '\\noindent\n'
          'Extra challenge: Try to vectorize your code. If you do it properly '
          'it will be compatible with both 2D and 3D. NumPy has several\n'
          'good packages that you can use to vectorize your code. The ones '
          'used in the solution are tensordot to dotproduct along an axis\n'
          'and linalg.norm to find the length of several vectors along an '
          'axis.',
  'title': 'Visualize the field from a dipole',
  'type': 'Exercise',
  'type_visible': True}]