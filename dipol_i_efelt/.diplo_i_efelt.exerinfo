
# Information about all exercises in the file diplo_i_efelt.do.txt.
# The information can be loaded into a Python list of dicts by
#
# f = open('.diplo_i_efelt.exerinfo', 'r')
# exer = eval(f.read())
#
[{'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': None,
  'no': 1,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '$\\Sigma \\mathbf{F} = 0$',
             'text': 'What is the net force on the dipole?'},
            {'answer': '',
             'file': None,
             'hints': ['The formula for torque is $\\bm{\\tau} = '
                       '\\mathbf{r}\\times\\mathbf{F}$, where $\\mathbf{r}$ is '
                       'the the vector going from the point of rotation to '
                       'where the force $\\mathbf{F}$ is applied.'],
             'solution': 'Using the formula for torque and some cross product '
                         'rules we get\n'
                         '!bt\n'
                         '\\begin{align}\n'
                         '\\bm\\tau = \\mathbf{r} \\times \\mathbf{F}\xa0= '
                         '\\left(\\frac{\\mathbf{d}}{2} \\times '
                         'q\\mathbf{E}\\right) + '
                         '\\left(-\\frac{\\mathbf{d}}{2} \\times '
                         '(-q\\mathbf{E})\\right) = q\\mathbf{d} \\times '
                         '\\mathbf{E} = \\mathbf{p}\\times\\mathbf{E}\n'
                         '\\end{align}\n'
                         '\n'
                         '!et',
             'text': 'Find the torque in terms of the electric moment '
                     '$\\mathbf{p}$ and the electric field $\\mathbf{E}$.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': 'Stable equilibrium: $\\theta = 0$, Unstable '
                         'equilibrium: $\\theta = \\pi$, maximum torque: '
                         '$\\theta = \\frac{\\pi}{2} \\ \\ \\wedge \\ \\ '
                         '\\theta = \\frac{3\\pi}{2}$',
             'text': 'For what angles $\\theta$ do we have stable and unstable '
                     'equilibrium? And when do we have maximum torque?'},
            {'answer': '',
             'file': None,
             'hints': ['A simple harmonic oscillator has the differential '
                       'equation\n'
                       '!bt\n'
                       '\\begin{equation}\n'
                       'm\\frac{d²x}{dt²} = -kx\n'
                       '\\end{equation}\n'
                       '\n'
                       '!et\n'
                       'Where $m$ and $k$ are constant and $x$ describes the '
                       'harmonic motion. The solution is\n'
                       '!bt\n'
                       '\\begin{equation}\n'
                       'x(t) = Acos(\\omega t + \\phi) \\ \\ \\ \\ \\omega = '
                       '\\sqrt{\\frac{k}{m}}\n'
                       '\\end{equation}\n'
                       '\n'
                       '!et\n'
                       '$A$ and $\\phi$ are constant.'],
             'solution': 'Looking at the torque:\n'
                         '!bt\n'
                         '\\begin{equation}\n'
                         '\\bm\\tau = \\mathbf{p}\\times\\mathbf{E} \\implies '
                         '\\tau = -|\\mathbf{p}||\\mathbf{E}|sin(\\theta) = '
                         'I\\alpha\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et\n'
                         'Using the small angle approcimation we get\n'
                         '!bt\n'
                         '\\begin{equation}\n'
                         'I\\alpha \\approx '
                         '-|\\mathbf{p}||\\mathbf{E}|\\theta\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et\n'
                         'This gives us the differential equation\n'
                         '!bt\n'
                         '\\begin{equation}\n'
                         'I\\frac{d²\\theta}{dt²} = '
                         '-|\\mathbf{p}||\\mathbf{E}|\\theta\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et\n'
                         'This is an equation for a simple harmonic '
                         'oscillator.',
             'text': 'Show that for small values of $\\theta$ you get a simple '
                     'harmonic motion. Here you need to use the small angle '
                     'approximation ($sin(\\theta) \\approx \\theta$) and '
                     '$\\bm\\tau = I\\bm\\alpha$, where $I$ is the moment of '
                     'inertia and $\\bm\\alpha$ is the angular acceleration.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '!bt\n'
                         '\\begin{equation}\n'
                         '\\omega = '
                         '\\sqrt{\\frac{|\\mathbf{p}||\\mathbf{E}|}{I}}\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et',
             'text': 'What is the angular velocity?'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': 'We are looking for a solution like\n'
                         '!bt\n'
                         '\\begin{equation}\n'
                         '\\theta(t) = Acos(\\omega t + \\phi)\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et\n'
                         'In order for energy to be conserved $A = \\theta_0$ '
                         'where $\\theta_0$ is the maximum value of $\\theta$. '
                         '$\\omega$ is known and $\\phi$ depends on the '
                         'initial conditions, lets say the $\\theta$ peaks at '
                         '$t=0$, then $\\phi = 0$. The angle $\\theta$ can '
                         'therefore be described by the equation\n'
                         '!bt\n'
                         '\\begin{equation}\n'
                         '\\theta(t) = \\theta_0 '
                         'cos\\left(\\sqrt{\\frac{|\\mathbf{p}||\\mathbf{E}|}{I}}t\\right)\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et',
             'text': 'Find the formula for $\\theta$.'},
            {'answer': '',
             'file': None,
             'hints': ['The formula for moment of inertia for point mass\n'
                       '!bt\n'
                       '\\begin{equation}\n'
                       'I = \\sum_i m_ir_i² \n'
                       '\\end{equation}\n'
                       '\n'
                       '!et\n'
                       '$m_i$ is the mass and $r_i$ the distance from the '
                       'point of rotation to the point mass.'],
             'solution': '!bt\n'
                         '\\begin{verbatim}\n'
                         'import numpy as np\n'
                         'import matplotlib.pyplot as plt\n'
                         'import scipy.constants as const\n'
                         'theta0 = (10.0/180)*np.pi   # initial displacement '
                         'in radians\n'
                         'q = const.e                 # charge on dipole in '
                         'Coulombs\n'
                         'd = 1e-20                   # distance separating '
                         'the charges (m)\n'
                         'm = const.m_e               # mass of a single '
                         'charge (kg)\n'
                         'E = 1e-3                    # magnitude of the '
                         'electric field\n'
                         'I = 2*m*(d/2)**2            # moment of inertia\n'
                         'p = q*d                     # electric moment\n'
                         'omega = np.sqrt(p*E/I)      # angular frequency\n'
                         'T = 2*np.pi/omega           # period\n'
                         't = np.linspace(0, 2*T, 2000)  # time interval from '
                         't = 0 to t = 2T\n'
                         'theta = theta0*np.cos(omega*t) # solution for Simple '
                         'harmonic motion\n'
                         '#Plot\n'
                         'plt.plot(t, theta)\n'
                         'plt.title("Simple Harmonic Motion - dipole in an '
                         'Electric field")\n'
                         'plt.xlabel("time (s)")\n'
                         'plt.ylabel("angle (radians)")\n'
                         'plt.grid()\n'
                         'plt.show()\n'
                         '\\end{verbatim}\n'
                         '\n'
                         '!et',
             'text': 'Plot the angle over two periods.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '!bt\n'
                         '\\begin{verbatim}\n'
                         'import numpy as np\n'
                         'import matplotlib.pyplot as plt\n'
                         'from scipy.integrate import odeint\n'
                         'theta = np.pi/6         # intial angle of '
                         'displacement (degres)\n'
                         'q = 1.0e-19             # Charge on dipole in '
                         'Coulombs\n'
                         'd = 3.0e-9              # distance separating the '
                         'charges (m)\n'
                         'p = q*d                 # electric moment\n'
                         'm = 3.0e-5              # mass of a single charge '
                         '(kg)\n'
                         'E = 1000                # magnitude of the electric '
                         'field\n'
                         'I = 2*m*(d/2)**2        # moment of inertia\n'
                         'omega = np.sqrt(p*E/I)  #angle velocity\n'
                         'T = 2*np.pi/omega       # period\n'
                         '# number of time intervals\n'
                         'N = int(1e4)\n'
                         '# set the times to evaluate\n'
                         't = np.linspace(0, 4*T, N)\n'
                         '# compute approximate theta values on the time '
                         'intervals\n'
                         'Approx_Solution = theta*np.cos(omega*np.array(t))\n'
                         'def torque(x0, t, p, I, E):\n'
                         '    dfdt = np.zeros(2)\n'
                         '    dfdt[0] = x0[1]\n'
                         '    dfdt[1] = -p*E*np.sin(x0[0])/I\n'
                         '    return dfdt\n'
                         '# Set the intial condition [initial angle, initial '
                         'velocity]\n'
                         'x0 = [theta, 0.0]\n'
                         '# numerically solve the real solution using odeint\n'
                         'sol2 = odeint(torque, x0, t, args=(p, I, E))\n'
                         '# Plot the two solutions\n'
                         'plt.plot(t, Approx_Solution)\n'
                         'plt.plot(t, sol2[:, 0])\n'
                         'plt.grid()\n'
                         'plt.xlabel("time (s)")\n'
                         'plt.ylabel("angle (rads)")\n'
                         'plt.show()\n'
                         '\\end{verbatim}\n'
                         '\n'
                         '!et',
             'text': 'Find the numeric solution (do not use small angle '
                     'approximation) and plot both results over four periods. '
                     "Use SciPy's odeint package to solve the differential "
                     'equation. The initial conditions are $q = e$, '
                     '$d=3\\times 10^{-9}$m, $m=3\\times 10^{-5}$kg and '
                     '$E=1000$N/C.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '!bt\n'
                         '\\begin{verbatim}\n'
                         '# compute the difference between approx and actual '
                         'on intervals\n'
                         'diff = np.abs(Approx_Solution-sol2[:,0])\n'
                         '# Plot the difference vs time\n'
                         'plt.plot(t, diff)\n'
                         'plt.xlabel("time (s)")\n'
                         'plt.ylabel("Difference")\n'
                         'plt.show()\n'
                         '#finding where the error is bigger than 0.05 rad\n'
                         'index = np.where(diff>0.05)\n'
                         '# Plot the red dots\n'
                         "plt.plot(t, sol2[:,0], label='numeric solution')\n"
                         "plt.scatter(t[index], sol2[index,0], color='r', "
                         "label='error>0.01 rad')\n"
                         'plt.xlabel("time (s)")\n'
                         'plt.ylabel("angle (rads)")\n'
                         'plt.legend(loc=1)\n'
                         'plt.grid()\n'
                         'plt.show()\n'
                         '\\end{verbatim}\n'
                         '\n'
                         '!et',
             'text': 'Expand the code over and plot the difference between the '
                     'numeric and approximate solution over time. Find where '
                     'the difference between them is above 0.05 rad. Plot red '
                     'dots over the numeric solution where that is the case.'}],
  'text': '*(Made by: Sigurd Sørlie Rustad)*\n'
          '\n'
          '\\noindent\n'
          'In this exercise we will take a look at an electric dipole in a '
          'uniform electric field. The distance between them is $d$ (see '
          'figure under).\n'
          'FIGURE:[dipole_efield_fig, width=600 frac=1.0]',
  'title': 'Dipole in a uniform electric field',
  'type': 'Exercise',
  'type_visible': True}]