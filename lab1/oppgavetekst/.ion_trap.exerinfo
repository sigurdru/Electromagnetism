
# Information about all exercises in the file ion_trap.do.txt.
# The information can be loaded into a Python list of dicts by
#
# f = open('.ion_trap.exerinfo', 'r')
# exer = eval(f.read())
#
[{'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': None,
  'no': 1,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': ["Use Laplace's equation."],
             'solution': "Laplace's equation is given by $\\nabla^2 V = 0$ "
                         "(recall that we assume there's no free charges "
                         'inside the trap, so $\\rho = 0$).\n'
                         '!bt\n'
                         '\\begin{equation}\n'
                         '  \\nabla^2 V = \\frac{\\partial^2 V}{\\partial x^2} '
                         '+ \\frac{\\partial^2 V}{\\partial y^2} + '
                         '\\frac{\\partial^2 V}{\\partial z^2} = 6A \\neq 0.\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et\n'
                         "Since $V$\xa0does not obey Laplace's equation, it's "
                         'an unphysical electric potential and cannot exist in '
                         'a vacuum.',
             'text': 'Imagine we want the particle to stay located in a small '
                     'area in space. The simplest such area to represent '
                     "mathematically would be a sphere, wouldn't it? To create "
                     'a spherical trap, we can imagine that we set up a '
                     'continuous distribution of charges to create a spherical '
                     'harmonic oscillator (kinda like three decoupled springs '
                     'with a mass attached to each) such that its potential '
                     'is\n'
                     '!bt\n'
                     '\\begin{equation}\n'
                     '  V(x,y,z) = A(x^2 + y^2 + z^2),\n'
                     '\\end{equation}\n'
                     '\n'
                     '!et\n'
                     'for an appropriate constant $A$. This way the particle '
                     'would oscillate back and forth about the origin with '
                     'certainty. Unfortunately, nature is not that simple. '
                     'Show that this potential cannot exist in a vacuum.'},
            {'answer': '',
             'file': None,
             'hints': ["Again, use Laplace's equation."],
             'solution': "The potential must obey Laplace's equation, so\n"
                         '!bt\n'
                         '\\begin{equation}\n'
                         '  \\nabla^2 V =2A(\\alpha  + \\beta  + \\gamma ) = '
                         '0,\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et\n'
                         'which can be achieved if $\\beta = \\alpha$\xa0and '
                         '$\\gamma = -2\\alpha$ (there are several other valid '
                         'constraints, but these will be more convenient with '
                         'respect to the geometrical setup of the trap). '
                         'Setting $\\alpha = 1$, we get\n'
                         '!bt\n'
                         '\\begin{equation}\n'
                         '  V(x,y,z) = A(x^2 + y^2 - 2z^2).\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et',
             'text': 'To create a potential that can exist in a vacuum, we can '
                     'modify the former as\n'
                     '!bt\n'
                     '\\begin{equation}\n'
                     '  V(x,y,z) = A(\\alpha x^2 + \\beta y^2 + \\gamma z^2),\n'
                     '\\end{equation}\n'
                     '\n'
                     '!et\n'
                     'where $\\alpha, \\beta, \\gamma \\neq 0$\xa0are real '
                     'constants. Find constraints on these constants such that '
                     'the potential can exist in a vacuum and show that from a '
                     'suitable choice of constraints we can obtain the '
                     "potential (there's more than one choice)\n"
                     '!bt\n'
                     '\\begin{equation}\n'
                     '  V(x,y,z) = A( x^2 +  y^2 - 2z^2),\n'
                     '\\end{equation}\n'
                     '\n'
                     '!et'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': 'The ring is held at a negative potential $-V_0$, so '
                         '$V(r_0, 0) = -V_0$\xa0which implies\n'
                         '!bt\n'
                         '$$ V(r_0, 0) = Ar_0^2 = -V_0 \\implies A = '
                         '-\\frac{V_0}{r_0^2}$$\n'
                         '\n'
                         '!et\n'
                         'The end caps is held at a positive potential $V_0$, '
                         'so $V(0,z_0) = V_0$, giving\n'
                         '!bt\n'
                         '$$ V(0, z_0) = \\frac{V_0}{r_0^2}(2z_0^2) = V_0,$$\n'
                         '\n'
                         '!et\n'
                         'meaning $r_0^2 = 2z_0^2$. Clearly, then, the '
                         'potential can be written as\n'
                         '!bt\n'
                         '$$ V(r,z) = \\frac{V_0}{r_0^2}(2z^2 - r^2).$$\n'
                         '\n'
                         '!et',
             'text': 'FIGURE:[figures/penningtrap_noB.jpg, frac=0.5] A simple '
                     'setup for the trap with (approximately) the potential '
                     '$V(x,y,z)$. In reality the end caps must be paraboloids '
                     'stretching out to infinity. Similarly, the ring must be '
                     'a hyperboloid that stretches out to infinity in both '
                     'directions. But inside the setup shown, $V(x,y,z)$\xa0is '
                     'a good approximation. label{fig:penningtrap_noB}\n'
                     '\n'
                     'Figure ref{fig:penningtrap_noB} shows as simple '
                     'experimental setup consisting of two finite '
                     'paraboloid-shaped end-caps and a ring which will serve '
                     'as electrodes. To trap positive ions, we want the end '
                     'caps to be held at a static positive potential $V_0$\xa0'
                     'and the ring  to be held at at static negativ potential '
                     '$-V_0$. Let the radius of the ring be $r_0$\xa0and the '
                     'end caps be placed a length $z_0$ from the center of the '
                     'ring. Using cylindrical coordinates $x = r\\cos\\phi$, '
                     '$y = r\\sin\\phi$ and $z = z$, the potential can be '
                     'written as\n'
                     '!bt\n'
                     '\\begin{equation}\n'
                     '  V(r,z) = A(r^2 - 2z^2).\n'
                     '\\end{equation}\n'
                     '\n'
                     '!et\n'
                     'Find the constant $A$ and the relationship between $r_0$ '
                     'and $z_0$\xa0and use the results to show that the '
                     'potential for the trap can be written as\n'
                     '!bt\n'
                     '\\begin{equation}\n'
                     '  V(r,z) = \\frac{V_0}{r_0^2}(2z^2 - r^2).\n'
                     '\\end{equation}\n'
                     '\n'
                     '!et\n'
                     '*(This expression for $V(r,z)$\xa0will to a good degree '
                     'approximate the actual potential inside the trap.)*'},
            {'answer': '',
             'file': None,
             'hints': ['Use the second derivative test (Hessian determinant). '
                       'Or plot (google surface plot) it and use it to explain '
                       "why you can't trap the ion."],
             'solution': 'The Hessian matrix is given by\n'
                         '!bt\n'
                         '$$\n'
                         'H =\n'
                         '  \\begin{bmatrix}\n'
                         '    \\frac{\\partial^2 V}{\\partial r^2} & '
                         '\\frac{\\partial^2 V}{\\partial r \\partial z} \\\\\n'
                         '    \\frac{\\partial^2 V}{\\partial r \\partial z} & '
                         '\\frac{\\partial^2 V}{\\partial z^2}\n'
                         '  \\end{bmatrix}\n'
                         '  =\n'
                         '  \\begin{bmatrix}\n'
                         '    -\\frac{2V_0}{r_0^2} & 0 \\\\\n'
                         '    0 & \\frac{4V_0}{r_0^2}\n'
                         '  \\end{bmatrix}\n'
                         '$$\n'
                         '\n'
                         '!et\n'
                         'which has the determinant $\\det H = -8V_0^2/r_0^4 < '
                         '0 $. Since $\\det H < 0$, there exists no stable '
                         "equilibrium for the potential and thus we can't "
                         'possibly trap the ion.\n'
                         '\n'
                         'Plotting the potential $V(r,z)$\xa0would give us '
                         'figure ref{fig:potential}. The code below was used '
                         'to produce the plot. In the figure, we can see that '
                         "there's no stable equilibrium points since there\n"
                         "are no local minima. But then we can't hope to "
                         "successfully trap the particle since there's no "
                         'point in space the particle will oscillate about.\n'
                         '!bt\n'
                         '\\begin{verbatim}\n'
                         '  from mpl_toolkits.mplot3d import Axes3D\n'
                         '  import matplotlib.pyplot as plt\n'
                         '  import numpy as np\n'
                         '  fig = plt.figure()\n'
                         '  ax = fig.gca(projection="3d")\n'
                         '  z0 = 1\n'
                         '  r0 = np.sqrt(2)*z0\n'
                         '  r = np.linspace(0, r0,1001)\n'
                         '  z = np.linspace(-z0, z0, 1001)\n'
                         '  r,z = np.meshgrid(r,z)\n'
                         '  V = 2*z*z - r*r\n'
                         '  surf = ax.plot_surface(r,z,V)\n'
                         '  plt.show()\n'
                         '\\end{verbatim}\n'
                         '\n'
                         '!et\n'
                         '\n'
                         'FIGURE:[figures/fig-failed_trap.pdf, frac=0.8] The '
                         "particle would escape since there's no stable "
                         'equilibrium here. label{fig:potential}',
             'text': 'Show that this potential cannot trap the ion (Ah... '
                     "that's a bummer, but worry not - we will fix this later "
                     'on).'},
            {'answer': '',
             'file': None,
             'hints': ["Use Newton's almighty 2.law! Also, let me suggest some "
                       'constants for you: Set  $V_0 = 4000$ V, $\\Omega = '
                       "100\\pi$ Hz (that's the angular frequency a wall "
                       'outlet would give you). In a demonstration of this '
                       'type of trap one usually traps small, charged '
                       'particles such as cinnamon. The mass of a cinnamon '
                       'grain is roughly $m \\approx 5\\times 10^{-5} \\ '
                       '\\text{kg}$. The average charge of a trapped cinnamon '
                       'particle is roughly $q \\approx 5\\times 10^{-5} \\ '
                       '\\text{C}$. A reasonable size for the trap is $z_0 '
                       '\\approx 0.005 \\ \\text{m}$.'],
             'solution': 'The electric field is found using its relation to '
                         'the potential:\n'
                         '!bt\n'
                         '\\begin{equation}\n'
                         '  \\begin{split}\n'
                         '    \\boldsymbol{E} & = -\\nabla V\n'
                         '    = \\frac{2V_0}{r_0^2}\\cos(\\Omega '
                         't)(x\\hat{e}_x + y\\hat{e}_y - 2z\\hat{e}_z ),\n'
                         '  \\end{split}\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et\n'
                         "which through Newton's 2.law yields the differential "
                         'equation\n'
                         '!bt\n'
                         '\\begin{equation}\n'
                         '  \\ddot{\\boldsymbol{r}} = '
                         '\\frac{2qV_0}{mr_0^2}\\cos(\\Omega t) (x\\hat{e}_x + '
                         'y\\hat{e}_y - 2z\\hat{e}_z).\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et\n'
                         'We thus end up with three decoupled differential '
                         'equations:\n'
                         '!bt\n'
                         '\\begin{equation}\n'
                         '  \\begin{split}\n'
                         '    \\ddot{x} - \\frac{2qV_0}{mr_0^2}\\cos(\\Omega '
                         't) x = 0 \\\\\n'
                         '    \\ddot{y} - \\frac{2qV_0}{mr_0^2}\\cos(\\Omega '
                         't) y = 0 \\\\\n'
                         '    \\ddot{z} + \\frac{4qV_0}{mr_0^2}\\cos(\\Omega '
                         't) z = 0 \\\\\n'
                         '  \\end{split}\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et\n'
                         'Using Euler-Cromer as our algorithm, a class that '
                         'solves these can be written as:\n'
                         '!bt\n'
                         '\\begin{verbatim}\n'
                         '  import numpy as np\n'
                         '  from progress.bar import IncrementalBar\n'
                         '  import matplotlib.pyplot as plt\n'
                         '  from mpl_toolkits.mplot3d import Axes3D\n'
                         '  plt.rc("text", usetex=True)\n'
                         '  class paul_trap_single_particle:\n'
                         '      def __init__(self, total_time, Nsteps):\n'
                         '          self.total_time = total_time\n'
                         '          self.Nsteps = Nsteps\n'
                         '          self.dt = total_time/Nsteps\n'
                         '          self.dt_squared = 0.5*self.dt**2\n'
                         '          elementary_charge = 1e-19\n'
                         '          self.g = 9.81           #m/s^2\n'
                         '          self.ke = 1./(4*np.pi*8.85e-12)         '
                         '#Coulomb constant\n'
                         '          self.q_over_m = 1e-4             #C/kg\n'
                         '          self.m = 5e-5                  #Roughly '
                         'the mass of a grain of cinnamon\n'
                         '          self.q = self.m*self.q_over_m    #Charge '
                         'of a grain of cinnamon.\n'
                         '          self.v = np.zeros((Nsteps, 3))\n'
                         '          self.r = np.zeros((Nsteps, 3))\n'
                         '          self.a = np.zeros(3)\n'
                         '          self.t = np.zeros(Nsteps)\n'
                         '          #Trap dimensions\n'
                         '          self.z0 = 0.005\n'
                         '          self.r0 = np.sqrt(2)*self.z0\n'
                         '          #AC source\n'
                         '          self.Omega = 2*np.pi*50         #50 Hz AC '
                         'voltage.\n'
                         '          self.V0 = 4000                  #Volts\n'
                         '          self.r[0, :] = '
                         'np.random.uniform(-0.5*self.z0, 0.5*self.z0, '
                         'size=3)\n'
                         '      def solve_euler_cromer(self):\n'
                         '          bar = IncrementalBar("Progress", max = '
                         'self.Nsteps)\n'
                         '          for k in range(self.Nsteps-1):\n'
                         '              bar.next()\n'
                         '              self.t[k+1] = self.t[k] + self.dt\n'
                         '              omega_z = '
                         '4*self.q_over_m/self.r0**2*self.V0*np.cos(self.Omega*self.t[k])\n'
                         '              omega_xy = 0.5*omega_z\n'
                         '              self.a[0] = omega_xy*self.r[k, 0]\n'
                         '              self.a[1] = omega_xy*self.r[k, 1]\n'
                         '              self.a[2] = -omega_z*self.r[k, 2] - '
                         'self.g\n'
                         '              self.v[k+1, :] = self.v[k, :] + '
                         'self.a[:]*self.dt\n'
                         '              self.r[k+1, :] = self.r[k, :] + '
                         'self.v[k+1, :]*self.dt\n'
                         '          bar.finish()\n'
                         '      def plot_trajectory(self):\n'
                         '          self.r[:,:]/self.z0\n'
                         '          fig = plt.figure()\n'
                         "          ax = fig.gca(projection='3d')\n"
                         '          ax.set_xlabel(r"$x/z_0$", fontsize=14)\n'
                         '          ax.set_ylabel(r"$y/z_0$", fontsize=14)\n'
                         '          ax.set_zlabel(r"$z/z_0$", fontsize=14)\n'
                         '          ax.plot(self.r[:,0], self.r[:,1], '
                         'self.r[:,2])\n'
                         '          l = ["paul_trap", "particles", "only_one", '
                         '"total_time", str(self.total_time)]\n'
                         '          plt.savefig("_".join(l) + ".pdf")\n'
                         '          plt.show()\n'
                         '          plt.close()\n'
                         '\\end{verbatim}\n'
                         '\n'
                         '!et\n'
                         'and the usage of the class is shown below (the file '
                         'containing the class is called one\\_particle.py, '
                         'which explains the import statement at the top):\n'
                         '!bt\n'
                         '\\begin{verbatim}\n'
                         '  from one_particle import '
                         'paul_trap_single_particle\n'
                         '  import sys\n'
                         '  total_time = float(sys.argv[1])\n'
                         '  Nsteps = int(1e5)\n'
                         '  my_trap = paul_trap(total_time, Nsteps)\n'
                         '  my_trap.solve_euler_cromer()\n'
                         '  my_trap.plot_trajectory()\n'
                         '\\end{verbatim}\n'
                         '\n'
                         '!et\n'
                         'Simulating for $t = 1$\xa0s with $N_\\text{steps} = '
                         '10^5$ steps gave the trajectory shown in figure '
                         'ref{fig:one_particle_trajectory}.\n'
                         '\n'
                         'FIGURE:[figures/paul_trap_particles_only_one_total_time_0.1.pdf, '
                         'frac=0.8] The 3D trajectory of a single particle in '
                         'the Paul trap.. label{fig:one_particle_trajectory}',
             'text': 'We may summarize our findings so far: a static electric '
                     'field is *not* sufficient to trap charged particles in '
                     "3D. This is stated by *Earnshaw's theorem*. There's a "
                     'clever way to fix this problem. Instead of working with '
                     'a static potential, we replace the constant $V_0$\xa0'
                     'with the sinusoidal factor $V_0 \\cos (\\Omega t)$. This '
                     'way, if we provide an appropriate angular frequency '
                     '$\\Omega$, we can stop the particle(s) in the trap from '
                     'escaping in the $xy$-plane. The general expression is\n'
                     '!bt\n'
                     '\\begin{equation}\n'
                     '  V(x,y,z,t) = \\frac{V_0\\cos \\Omega t}{r_0^2}(2z^2 - '
                     'x^2 - y^2),\n'
                     '\\end{equation}\n'
                     '\n'
                     '!et\n'
                     'Find the force on a particle with charge $q > 0$\xa0and '
                     'mass $m$. Solve the equations of motion numerically and '
                     "plot the particle's trajectory in 3D. Are you able to "
                     'trap the particle?'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': 'Let $\\boldsymbol{F}_i$ denote the force on particle '
                         '$i$. The force on the particle from the field setup '
                         'by the trap is the same as before, that is:\n'
                         '!bt\n'
                         '\\begin{equation}\n'
                         '  \\boldsymbol{F}_{e,i} = '
                         '\\frac{2qV_0}{r_0^2}\\cos(\\Omega t)(x\\hat{e}_x + '
                         'y\\hat{e}_y - 2z\\hat{e}_z).\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et\n'
                         'The electric field created by all other particles '
                         "except particle $i$\xa0at particle $i$'s position "
                         'is\n'
                         '!bt\n'
                         '\\begin{equation}\n'
                         '  \\boldsymbol{E}_{j\\neq i} = \\frac{1}{4\\pi '
                         '\\epsilon_0}\\sum_{j\\neq i} q_j '
                         '\\frac{\\boldsymbol{r}_i - '
                         '\\boldsymbol{r}_j}{|\\boldsymbol{r}_i - '
                         '\\boldsymbol{r}_j|^3},\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et\n'
                         'where $\\boldsymbol{r}_i$ denoted the position '
                         'vector of particle\xa0$i$\xa0and so on. The electric '
                         'force due to this field on particle $i$\xa0is just '
                         '$\\boldsymbol{F} = q\\boldsymbol{E}$. The *net* '
                         'force on particle $i$\xa0is thus\n'
                         '!bt\n'
                         '\\begin{equation}\n'
                         '  \\begin{split}\n'
                         '    \\boldsymbol{F}_i & = '
                         '\\frac{2qV_0}{r_0^2}\\cos(\\Omega t)(x\\hat{e}_x + '
                         'y\\hat{e}_y - 2z\\hat{e}_z) + \\frac{q_i}{4\\pi '
                         '\\epsilon_0}\\sum_{j\\neq i} q_j '
                         '\\frac{\\boldsymbol{r}_i - '
                         '\\boldsymbol{r}_j}{|\\boldsymbol{r}_i - '
                         '\\boldsymbol{r}_j|^3} \\\\\n'
                         '    & = \\frac{2qV_0}{r_0^2}\\cos(\\Omega '
                         't)(x\\hat{e}_x + y\\hat{e}_y - 2z\\hat{e}_z) + '
                         '\\frac{q^2}{4\\pi \\epsilon_0}\\sum_{j\\neq i}  '
                         '\\frac{\\boldsymbol{r}_i - '
                         '\\boldsymbol{r}_j}{|\\boldsymbol{r}_i - '
                         '\\boldsymbol{r}_j|^3},\n'
                         '  \\end{split}\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et\n'
                         'where I used that $q_i = q_j \\equiv q$ and can thus '
                         "be factorized out of the sum. Using Newton's 2.law "
                         '$F = m\\ddot{\\boldsymbol{r}}$, then gives\n'
                         '!bt\n'
                         '\\begin{equation}\n'
                         '  \\ddot{\\boldsymbol{r}} - '
                         '\\frac{2qV_0}{mr_0^2}\\cos(\\Omega t)(x\\hat{e}_x + '
                         'y\\hat{e}_y - 2z\\hat{e}_z) + \\frac{q^2}{4\\pi '
                         '\\epsilon_0 m}\\sum_{j\\neq i}  '
                         '\\frac{\\boldsymbol{r}_i - '
                         '\\boldsymbol{r}_j}{|\\boldsymbol{r}_i - '
                         '\\boldsymbol{r}_j|^3} = \\boldsymbol{0},\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et\n'
                         'Modifying the class for the single-particle case we '
                         'can create class with the following structure:\n'
                         '!bt\n'
                         '\\begin{verbatim}\n'
                         '  class paul_trap:\n'
                         '      def __init__(self, Nparticles, total_time, '
                         'Nsteps):\n'
                         '          self.Nparticles = Nparticles\n'
                         '          self.total_time = total_time\n'
                         '          self.Nsteps = Nsteps\n'
                         '          self.dt = total_time/Nsteps\n'
                         '          self.dt_squared = 0.5*self.dt**2\n'
                         '          elementary_charge = 1e-19\n'
                         '          self.g = 9.81           #m/s^2\n'
                         '          self.ke = 1./(4*np.pi*8.85e-12)         '
                         '#Coulomb constant\n'
                         '          self.q_over_m = 1e-4             #C/kg\n'
                         '          self.m = 5e-5                  #Roughly '
                         'the mass of a grain of cinnamon\n'
                         '          self.q = self.m*self.q_over_m    #Charge '
                         'of a grain of cinnamon.\n'
                         '          self.v = np.zeros((Nparticles, Nsteps, 3)) '
                         '#velocity\n'
                         '          self.r = np.zeros((Nparticles, Nsteps, 3)) '
                         '#positions\n'
                         '          self.a = np.zeros((Nparticles,3))          '
                         '#acceleration\n'
                         '          self.t = np.zeros(Nsteps)                  '
                         '#time\n'
                         '          #Trap dimensions\n'
                         '          self.z0 = 0.005\n'
                         '          self.r0 = np.sqrt(2)*self.z0\n'
                         '          #AC source\n'
                         '          self.Omega = 2*np.pi*50         #50 Hz AC '
                         'voltage.\n'
                         '          self.V0 = 4000                  #Volts\n'
                         '          for i in range(Nparticles):\n'
                         '              self.r[i, 0, :] = '
                         'np.random.uniform(-0.5*self.z0, 0.5*self.z0, '
                         'size=3)\n'
                         '      def solve_euler_cromer(self):\n'
                         '          bar = IncrementalBar("Progress", max = '
                         'self.Nsteps)  #gives a neat progress bar\n'
                         '          for k in range(self.Nsteps-1):\n'
                         '              bar.next()\n'
                         '              self.t[k+1] = self.t[k] + self.dt\n'
                         '              omega_z = '
                         '4*self.q_over_m/self.r0**2*self.V0*np.cos(self.Omega*self.t[k])\n'
                         '              omega_xy = 0.5*omega_z\n'
                         '              for i in range(self.Nparticles):\n'
                         '                  self.a[i, 0] = omega_xy*self.r[i, '
                         'k, 0]\n'
                         '                  self.a[i, 1] = omega_xy*self.r[i, '
                         'k, 1]\n'
                         '                  self.a[i, 2] = -omega_z*self.r[i, '
                         'k, 2] - self.g\n'
                         '                  #Add acceleration from interaction '
                         'term:\n'
                         '                  F = np.zeros(3)\n'
                         '                  for j in range(self.Nparticles):\n'
                         '                      r_diff = np.zeros(3)\n'
                         '                      if i != j:\n'
                         '                          r_diff = self.r[i,k,:] - '
                         'self.r[j,k,:]\n'
                         '                          rnorm = '
                         'np.linalg.norm(r_diff)\n'
                         '                          F += r_diff/rnorm**1.5\n'
                         '                  F *= self.q*self.q_over_m*self.ke\n'
                         '                  self.a[i,:] += F\n'
                         '                  self.v[i, k+1, :] = self.v[i, k, '
                         ':] + self.a[i, :]*self.dt\n'
                         '                  self.r[i, k+1, :] = self.r[i, k, '
                         ':] + self.v[i, k+1, :]*self.dt\n'
                         '          bar.finish()\n'
                         '      def plot_trajectory(self):\n'
                         '          self.r[:,:,:]/self.z0\n'
                         '          fig = plt.figure()\n'
                         "          ax = fig.gca(projection='3d')\n"
                         '          ax.set_xlabel(r"$x/z_0$", fontsize=14)\n'
                         '          ax.set_ylabel(r"$y/z_0$", fontsize=14)\n'
                         '          ax.set_zlabel(r"$z/z_0$", fontsize=14)\n'
                         '          for i in range(self.Nparticles):\n'
                         '              l = ["particle nr", str(i)]\n'
                         '              ax.plot(self.r[i,:,0], self.r[i,:,1], '
                         'self.r[i,:,2], label=" ".join(l))\n'
                         '          #plt.legend()\n'
                         '          l = ["paul_trap", "particles", '
                         'str(self.Nparticles), \\\n'
                         '                "total_time", str(self.total_time)]\n'
                         '          plt.savefig("_".join(l) + ".pdf")\n'
                         '          #plt.show()\n'
                         '          plt.close()\n'
                         '\\end{verbatim}\n'
                         '\n'
                         '!et\n'
                         'which can be used in the following way (the file '
                         'with the class is called particle\\_system.py):\n'
                         '!bt\n'
                         '\\begin{verbatim}\n'
                         '  from particle_system import paul_trap\n'
                         '  import sys\n'
                         '  Nparticles = 15\n'
                         '  total_time = float(sys.argv[1])\n'
                         '  Nsteps = int(1e5)\n'
                         '  my_trap = paul_trap(Nparticles, total_time, '
                         'Nsteps)\n'
                         '  my_trap.solve_euler_cromer()\n'
                         '  my_trap.plot_trajectory()\n'
                         '\\end{verbatim}\n'
                         '\n'
                         '!et\n'
                         'Figure ref{fig:2_particles} shows $N = 2$ particles '
                         'for $t=0.1$\xa0s. Figure ref{fig:5_particles} and '
                         'figure ref{fig:15_particles} shows simulations '
                         'carried over $t = 0.1$ s with $N = 5$ and $N = 15$ '
                         'particles, respectively.\n'
                         '\n'
                         'FIGURE:[figures/paul_trap_particles_2_total_time_0.1.pdf, '
                         'frac=0.8] The 3D trajectory of a $N = 2$ particles '
                         'for $t = 0.1$\xa0s. label{fig:2_particles}\n'
                         '\n'
                         'FIGURE:[figures/paul_trap_particles_5_total_time_0.1.pdf, '
                         'frac=0.8] The 3D trajectory of a $N = 5$ particles '
                         'for $t = 0.1$\xa0s. label{fig:5_particles}\n'
                         '\n'
                         'FIGURE:[figures/paul_trap_particles_15_total_time_0.1.pdf, '
                         'frac=0.8] The 3D trajectory of a $N = 15$ particles '
                         'for $t = 0.1$\xa0s. label{fig:15_particles}',
             'text': 'Suppose we place $N$\xa0identical particles with charge '
                     '$q > 0$ and mass $m$. Each particle, then, will '
                     'experience a force from the field as well as from the '
                     'electrostatic field formed by the charged particles '
                     'themselves. Find the equations of motion for all the '
                     'particles when you include the interaction between the '
                     'particles and modify your code so it computes the '
                     'position of all $N$\xa0particles. Compute particle '
                     'trajectories for $N = 2$, $N = 5$ and $N = 15$ particles '
                     'and plot their trajectories in 3D. Are you able to trap '
                     'multiple particles?'}],
  'text': '*(Made by René Ask)*\n'
          '\n'
          '\n'
          'In 1989, Wolfgang Paul and Hans Georg Dehmelt received a Nobel '
          'prize in physics for the creation of the *Paul trap* (although the '
          'actual trapping technique was developed by them back in the 1950s). '
          'The trapping technique allows physicists to trap and study '
          'properties of particles and atoms predicted by quantum mechanics.\n'
          'For instance, at CERN physicists trap antiparticles using such a '
          'trap to measure their properties and compare them with theoretical '
          'predictions. Such traps can also be used to trap the fundamental '
          'computing units in quantum computers, known as *qubits*.\n'
          '\n'
          "In this exercise, we'll look at how we can go about and create such "
          "a trap with theory from electromagnetism. For our purpose we'll "
          "assume we're going to trap ions with a charge $q > 0$ and mass $m$. "
          "We'll assume that the trap is in a vacuum with no charge "
          'distibution within.',
  'title': 'Modelling a 3D ion trap',
  'type': 'Exercise',
  'type_visible': True}]