
# Information about all exercises in the file two_moving_particles_oppgavetekst.do.txt.
# The information can be loaded into a Python list of dicts by
#
# f = open('.two_moving_particles_oppgavetekst.exerinfo', 'r')
# exer = eval(f.read())
#
[{'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': None,
  'no': 1,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '!bt\n'
                         '\\begin{equation}\n'
                         '\\mathbf{F}_{\\rm{from 1 on 2}} = '
                         '\\frac{\\mu_0}{4\\pi}\\frac{Q_2\\mathbf{v}_2\\times\\big(Q_1\\mathbf{v}_1\\times\\mathbf{R}\\big)}{R^3}\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et',
             'text': 'Write down the equation the for magnetic force between '
                     'two moving particles.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '!bt\n'
                         '\\begin{verbatim}\n'
                         'def Magnetic_force(r1, r2, v1, v2, Q1, Q2):\n'
                         '    #Returns the magnetic force from between two '
                         'moving particles\n'
                         '    r = r2 - r1\n'
                         '    R = np.linalg.norm(r)\n'
                         '    part1 = mu0/(4*np.pi*R**2)*Q2*v2\n'
                         '    part2 = np.cross(Q1*v1,r/R)\n'
                         '    F = np.cross(part1,part2)\n'
                         '    return F\n'
                         '\\end{verbatim}\n'
                         '\n'
                         '!et\n'
                         'Note that you have to import NumPy and assign the '
                         'value of the permeability of vacuum in order for '
                         'this to work.',
             'text': 'Write a function (in Python or MatLab) that takes in the '
                     'positions of the particles, their charges and their '
                     'velocities, and outputs the magnetic force from one of '
                     'the particles on the other.'},
            {'aftertext': '\n\n\n\n',
             'answer': '',
             'file': None,
             'hints': ['To get reasonable sizes use a scaled version for the '
                       'marmeability of vacuum.',
                       'Reasonable initial conditions are: $\\mu_0 = 1$, $Q_1 '
                       '= 1$, $Q_2=2$, $\\mathbf{v}_1=[0, -4, 0]$, '
                       '$\\mathbf{v}_2=[0, 4, 0]$, $\\mathbf{r}_1=[0, 0, 0]$ '
                       'and $\\mathbf{r}_2=[1, 0, 0]$.'],
             'solution': '!bt\n'
                         '\\begin{verbatim}\n'
                         '#Complicated initial conditions\n'
                         '# v1_0 = np.array([1,2,3]) #initial velocity of '
                         'particle 1\n'
                         '# v2_0 = np.array([-1,-5,5]) #initial velocity of '
                         'particle 2\n'
                         '# r1 = np.array([0,0,0]) #initial position of '
                         'particle 1\n'
                         '# r2 = np.array([1,0,0]) #initial position of '
                         'particle 2\n'
                         '#Easy initial conditions\n'
                         'v1_0 = np.array([0, -4, 0])  # initial velocity of '
                         'particle 1\n'
                         'v2_0 = np.array([0, 4, 0]) #initial velocity of '
                         'particle 2\n'
                         'r1 = np.array([0, 0, 0]) #initial position of '
                         'particle 1\n'
                         'r2 = np.array([1, 0, 0]) #initial position of '
                         'particle 2\n'
                         'Q1 = 1 #charge of particle 1\n'
                         'Q2 = 2 #charge of particle 2\n'
                         '#calculate the magnetic force between particle 1 and '
                         '2\n'
                         'F12 = Magnetic_force(r1, r2, v1_0, v2_0, Q1, Q2)\n'
                         '#The data we are going to plot\n'
                         'positions = np.array([r1,r2,r2])\n'
                         'vectors = np.array([v1_0, v2_0, F12])\n'
                         '#labels and colors we are going to use\n'
                         "labels = ['Velocity particle 1', \n"
                         "          'Velocity particle 2',\n"
                         "          'Magnetic force on particle 2']\n"
                         "colors = ['r', 'g', 'b']\n"
                         '#creating the figure we are going to use\n'
                         'fig = plt.figure()\n'
                         "ax = fig.add_subplot(111, projection = '3d')\n"
                         '#Plotting velocity and force vectors\n'
                         'for i in range(3):\n'
                         '    ax.quiver(positions[i, 0], positions[i, 1], '
                         'positions[i, 2],\n'
                         '              vectors[i, 0], vectors[i, 1], '
                         'vectors[i, 2], \n'
                         '              color=colors[i], label=labels[i])\n'
                         '#Plotting the postions of the particles\n'
                         "ax.scatter(r1[0], r1[1], r1[2], color='r', "
                         "label='Position particle 1')\n"
                         "ax.scatter(r2[0], r2[1], r2[2], color='g', "
                         "label='Position particle 2')\n"
                         '#setting the axis\n'
                         'ax.set_xlim([-5, 5])\n'
                         'ax.set_ylim([-5, 5])\n'
                         'ax.set_zlim([-5, 5])\n'
                         '#labeling the axis\n'
                         "ax.set_xlabel('x-axis')\n"
                         "ax.set_ylabel('y-axis')\n"
                         "ax.set_zlabel('z-axis')\n"
                         '#showing the plot\n'
                         'ax.legend()\n'
                         'plt.show()\n'
                         '\\end{verbatim}\n'
                         '\n'
                         '!et',
             'text': 'Plot the velocity vectors for both particles and the '
                     'force applied on one of the particles. Try for different '
                     'initial conditions. Do you get what you expected?'}],
  'text': 'Here we are going to visualize the magnetic force between two '
          'moving particles, in 3D. First we need to find the magnetic force '
          'between the two particles.',
  'title': 'Force between two moving particles',
  'type': 'Exercise',
  'type_visible': True}]