
# Information about all exercises in the file vis_efield.do.txt.
# The information can be loaded into a Python list of dicts by
#
# f = open('.vis_efield.exerinfo', 'r')
# exer = eval(f.read())
#
[{'answer': '',
  'chapter_exercise': None,
  'chapter_no': None,
  'chapter_title': None,
  'chapter_type': None,
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': None,
  'no': 1,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '!bt\n'
                         'The vector from the particle and the position you '
                         'want to evaluate is given by $\\mathbf{R} = [x - '
                         'x_1, y-y_1]$. We can then write the general electric '
                         'field:\n'
                         '\\begin{equation}\n'
                         '\\mathbf{E} = \\frac{Q}{4\\pi\\epsilon '
                         '_0\\big((x-x_1)^2 + (y-y_1)^2\\big)^{3/2}}[x-x_1, '
                         'y-y_1]\n'
                         '\\end{equation}\n'
                         '\n'
                         '!et',
             'text': 'Consider a particle in $(x_1, y_1)$ with charge $Q$, '
                     'write down the general electric field in position $(x, '
                     'y)$.'},
            {'answer': '',
             'file': None,
             'hints': ['It can be a good idea to scale $\\epsilon _0$ so you '
                       'get reasonable sizes.',
                       'Use quiver from matplotlib.pyplot to visualize the '
                       'field.'],
             'solution': '!bt\n'
                         '\\begin{verbatim}\n'
                         'import numpy as np\n'
                         'import matplotlib.pyplot as plt\n'
                         'eps0 = 1 #scaled to get reasonable sizes\n'
                         'def Efield(pos, Q, x, y):\n'
                         '    """\n'
                         '    This function takes in the position and charge '
                         'of a particle, the position\n'
                         '    you want to calculate the field, and returns the '
                         'x- and y-coordinate of\n'
                         '    the field.\n'
                         '    """\n'
                         '    r_eval = np.array([x-pos[0], y-pos[1]])\n'
                         '    R_eval = np.linalg.norm(r_eval, axis=0)\n'
                         '    Field = Q/(4*np.pi*eps0*R_eval**3)*r_eval\n'
                         '    return Field[0], Field[1]\n'
                         '#The area we are going to be looking at\n'
                         'x = np.linspace(-10,10,20)\n'
                         'y = x\n'
                         'X, Y = np.meshgrid(x,y)\n'
                         '#The position and charge of the particle\n'
                         'pos1 = np.array([1, 0])\n'
                         'Q1 = 1\n'
                         '#Calculating the electric field\n'
                         'U, V = Efield(pos1, Q1, X, Y)\n'
                         '#Plotting\n'
                         'fig, ax = plt.subplots()\n'
                         'ax.quiver(X, Y, U, V)\n'
                         "ax.plot(pos1[0], pos1[1], 'or')\n"
                         'plt.show()\n'
                         '\\end{verbatim}\n'
                         '\n'
                         '!et',
             'text': 'Make a program that takes in position and charge from a '
                     'particle, a point in space, and returns the electric '
                     'field vector in that point. Make a vector arrow plot.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '!bt\n'
                         '\\begin{verbatim}\n'
                         'eps0 = 1 #scaled to get reasonable sizes\n'
                         'def Efield_expanded(positions, charges, x, y):\n'
                         '    """\n'
                         '    This function takes in positions and charges, '
                         'positions we want to evaluate,\n'
                         '    and returns the resulting electric field.\n'
                         '    It also returns a list with colors that '
                         'corresponds to the charges of the particles.\n'
                         '    """\n'
                         '    Field = 0\n'
                         '    color = []\n'
                         '    for pos, Q in zip(positions, charges):\n'
                         '        r_eval = np.array([x-pos[0], y-pos[1]])\n'
                         '        R_eval = np.linalg.norm(r_eval, axis=0)\n'
                         '        Field += Q/(4*np.pi*eps0*R_eval**3)*r_eval\n'
                         '        if Q > 0:\n'
                         "            color.append('r')\n"
                         '        else:\n'
                         "            color.append('b')\n"
                         '    return Field[0], Field[1], color\n'
                         '#Defining positions and charges\n'
                         'pos1 = np.array([5, 5])\n'
                         'Q1 = 1\n'
                         'pos2 = np.array([0, 0])\n'
                         'Q2 = -1\n'
                         'pos3 = np.array([-2, -2])\n'
                         'Q3 = -3\n'
                         'positions = [pos1, pos2, pos3]\n'
                         'charges = [Q1, Q2, Q3]\n'
                         '#The area we are going to be looking at\n'
                         'x = np.linspace(-10,10,40)\n'
                         'y = x\n'
                         'X, Y = np.meshgrid(x, y)\n'
                         '#calculating the electric field\n'
                         'U, V, colors = Efield_expanded(positions, charges, '
                         'X, Y)\n'
                         '#plotting\n'
                         'fig, ax = plt.subplots()\n'
                         'for col, pos in zip(colors, positions):\n'
                         "    ax.plot(pos[0], pos[1], 'o', color=col)\n"
                         'ax.quiver(X, Y, U, V)\n'
                         'plt.show()\n'
                         '\\end{verbatim}\n'
                         '\n'
                         '!et',
             'text': 'Expand the function you made to take in an arbitrary '
                     'number of particles and then returns the resulting '
                     'electric field. Make a vector arrow plot.'}],
  'text': 'Here we are going to visualize the electric field from several '
          'particles in 2D. We are going to do this in parts.',
  'title': 'Visualize electric field',
  'type': 'Exercise',
  'type_visible': True}]